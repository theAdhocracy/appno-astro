---
import { sanityClient } from "sanity:client";

import Layout from "../layouts/Layout.astro";
import CTA from "../components/CTA.astro";
import RightDownArrow from "../assets/right-down-arrow.astro";
import PageCard from "../components/CardPage.astro";
import GridRevelation from "../components/GridRevelation.astro";
import GridLogo from "../components/GridLogo.astro";
import Banner from "../components/Banner.astro";

const data = await sanityClient.fetch(`*[_type == "homepage"]`);
const homepage = data?.[0];
---

<Layout title="Appnovation">
	<main>
		<section class="hero">
			<RightDownArrow />
			<h1 class="u-eyebrow">{homepage.title}<br />{homepage.subtitle}</h1>
			<p>{homepage.copy}</p>
			<div>
				{
					homepage.links.map((link: any, index: number) => (
						<CTA
							url={link.url}
							label={link.label}
							type={index === 1 ? "highlight" : undefined}
						/>
					))
				}
			</div>
		</section>
		<section class="highlight-grid">
			{
				homepage.highlights.map((highlight: any) => (
					<PageCard
						{...highlight}
						desc={highlight.description}
						url={`/${highlight.slug.current}`}
						thumb={highlight.thumbnail?.[0]}
					/>
				))
			}
		</section>
		{
			homepage.content?.map((block: any) => {
				switch (block._type) {
					case "revelation_grid":
						return <GridRevelation {...block} />;
					case "logo_grid":
						return <GridLogo {...block} />;
					case "banner":
						return <Banner {...block} />;
					default:
						return <p>Unknown Component</p>;
				}
			})
		}
	</main>
</Layout>

<style>
	main {
		--gutter: minmax(min(2rem, 4vw), 1fr);

		display: grid;
		grid-template-columns:
			[full-start] var(--gutter) [content-start] min(
				78rem,
				max(calc(100% - 16vw), calc(100% - 8rem))
			)
			[content-end] var(--gutter) [full-end];
		gap: 6rem min(4vw, 2rem);
		padding: min(6rem, 12vw) 0;
		margin: 0;

		color: var(--c-text);
		font-family: var(--f-sans);
	}

	:global(:where(main > *)) {
		grid-column: content;
	}

	h1 {
		color: var(--c-text);
	}

	.hero {
		display: flex;
		flex-direction: column;
		gap: 1rem;

		svg {
			display: none;
		}

		@media screen and (min-width: 500px) {
			& {
				grid-column: full;

				display: grid;
				grid-template-columns:
					[breakout-start] var(--gutter) [content-start] repeat(
						3,
						min(24.7rem, calc((100% - 12rem) / 3))
					)
					[content-end] var(--gutter) [breakout-end];
				gap: 2rem;

				svg {
					display: block;
					grid-row: 1 / 3;
					grid-column: 1 / 3;
					align-self: end;
					margin-block: 4.5rem -4rem;
				}
			}
		}

		@media screen and (min-width: 700px) {
			& {
				svg {
					grid-row: 1 / 4;
					margin-block: 4.5rem 0;
				}
			}
		}

		@media screen and (min-width: 1000px) {
			& {
				svg {
					grid-row: 1 / 5;
				}
			}
		}

		h1 {
			grid-row: 1;
			grid-column: 2 / 3;
			margin-block-start: 1rem;
		}

		p {
			grid-column: 3 / 5;
			place-self: end;
			font-size: clamp(1.125rem, 0.125rem + 5vi, 4rem);
			line-height: 1.3;
			text-wrap: balance;
		}

		div {
			grid-column: 3 / 5;
			display: grid;
			grid-template-columns: repeat(auto-fit, 10.625rem);
			gap: 1rem 2rem;
			height: fit-content;

			& > * {
				width: 100%;
			}
		}
	}

	.highlight-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(min(100%, 15rem), 1fr));
		gap: 2rem;
	}
</style>
