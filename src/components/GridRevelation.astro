---
export interface Props {
	title: string;
	subtitle: string;
	description?: string;
	header_link?: [
		{
			url: string;
			label: string;
		},
	];
	cards: [
		{
			_key: string;
			title: string;
			description: string;
		},
	];
}

const { title, description, subtitle, header_link, cards } = Astro.props;
---

<section class="grid-revelation">
	<header>
		<h2 class="u-eyebrow">{title}</h2>
		<p class="u-title">{subtitle}</p>
		<div>
			{description && <p>{description}</p>}
			{
				header_link && (
					<a href={header_link?.[0].url}>{header_link?.[0].label}</a>
				)
			}
		</div>
	</header>
	<div class="card-grid">
		{
			cards.map((card) => (
				<section>
					<>
						<h3>{card.title}</h3>
						<p id={`reveal-card-${card._key}`}>{card.description}</p>
						<footer>
							<button
								type="button"
								aria-label="Reveal description."
								aria-expanded="false"
								aria-controls={`reveal-card-${card._key}`}
							>
								<svg width="12" height="12" viewBox="0 0 12 12">
									<path d="M6 0V6V12" stroke-width="1.52361" />
									<path d="M12 6L-5.96046e-07 6" stroke-width="1.52361" />
								</svg>{" "}
							</button>
						</footer>
					</>
				</section>
			))
		}
	</div>
</section>

<script>
	// Function: Show and hide the description when the respective button is pressed
	const grid = document.querySelector(".grid-revelation .card-grid");
	const cards = grid?.querySelectorAll("button");

	if (grid) {
		cards?.forEach((card) => {
			card.addEventListener("click", () => {
				// Check current state
				const isRevealed = card
					.closest("section")
					?.getAttribute("data-toggled");
				console.log(isRevealed);

				// Toggle state
				if (isRevealed !== null) {
					card.setAttribute("aria-label", "Reveal description.");
					card.setAttribute("aria-expanded", "false");
				} else {
					card.setAttribute("aria-label", "Close description.");
					card.setAttribute("aria-expanded", "true");
				}

				card.closest("section")?.toggleAttribute("data-toggled"); // controls the styles
			});
		});
	}
</script>

<style>
	.grid-revelation {
		display: flex;
		flex-direction: column;
		gap: 4rem;

		h2,
		h3 {
			font-weight: 400;
		}

		header {
			display: flex;
			flex-wrap: wrap;
			gap: 1rem 2rem;

			h2 {
				width: 100%;
			}

			p,
			div {
				flex-basis: calc(50% - 1rem);
				place-self: center;
				min-width: 20ch;
			}

			div {
				display: flex;
				flex-direction: column;
				gap: 1rem;
			}

			a {
				font-size: 0.75rem;
			}
		}

		.card-grid {
			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(17.875rem, 1fr));
			gap: 2rem;

			section {
				--bg-color: var(--c-bg-block);
				--text-color: var(--c-text);
				--button-color: var(--c-highlight);
				--button-rotate: 0deg;
				--icon-color: var(--c-text-invert);

				display: flex;
				flex-direction: column;
				gap: 1rem;
				width: 100%;
				aspect-ratio: 1 / 1;
				padding: 1.5rem;
				background-color: var(--bg-color);
				color: var(--text-color);

				h3 {
					font-size: 1.25rem;
					line-height: 1.3;
				}

				p {
					font-size: 0.875rem;
				}

				button {
					display: none;
					margin-inline-start: auto;
					padding: 0.75rem;
					aspect-ratio: 1 / 1;
					border: none;
					border-radius: 50%;
					background-color: var(--button-color);
					rotate: var(--button-rotate);
					stroke: var(--icon-color);
					transition: rotate 0.5s ease;
				}

				@media (scripting: enabled) {
					button {
						display: block;
					}

					&:not([data-toggled]) {
						p {
							display: none;
						}

						h3 {
							flex-grow: 1;
						}
					}

					&[data-toggled] {
						--bg-color: var(--c-highlight);
						--text-color: var(--c-text-invert);
						--button-color: var(--c-text-invert);
						--button-rotate: 45deg;
						--icon-color: var(--c-text);

						p {
							flex-grow: 1;
						}

						button:hover,
						button:focus-visible {
							outline-color: currentColor;
						}
					}
				}
			}
		}
	}
</style>
